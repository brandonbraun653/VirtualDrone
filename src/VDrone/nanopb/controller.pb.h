/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_LIB_VIRTUALDRONE_SRC_VDRONE_NANOPB_CONTROLLER_PB_H_INCLUDED
#define PB_LIB_VIRTUALDRONE_SRC_VDRONE_NANOPB_CONTROLLER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _DiscreteEvent_SignalType { 
    DiscreteEvent_SignalType_PitchTrimUp = 0, 
    DiscreteEvent_SignalType_PitchTrimDn = 1, 
    DiscreteEvent_SignalType_RollTrimUp = 2, 
    DiscreteEvent_SignalType_RollTrimDn = 3, 
    DiscreteEvent_SignalType_YawTrimUp = 4, 
    DiscreteEvent_SignalType_YawTrimDn = 5, 
    DiscreteEvent_SignalType_ThrottleTrimUp = 6, 
    DiscreteEvent_SignalType_ThrottleTrimDn = 7, 
    DiscreteEvent_SignalType_SwitchAToggle = 8, 
    DiscreteEvent_SignalType_SwitchBToggle = 9, 
    DiscreteEvent_SignalType_SwitchCToggle = 10, 
    DiscreteEvent_SignalType_SwitchDToggle = 11, 
    DiscreteEvent_SignalType_Encoder0Center = 12, 
    DiscreteEvent_SignalType_Encoder1Center = 13 
} DiscreteEvent_SignalType;

typedef enum _DiscreteEvent_StateType { 
    DiscreteEvent_StateType_Active = 0, 
    DiscreteEvent_StateType_Inactive = 1, 
    DiscreteEvent_StateType_HiZ = 2 
} DiscreteEvent_StateType;

/* Struct definitions */
typedef struct _DiscreteEvent { 
    DiscreteEvent_SignalType signal; 
    DiscreteEvent_StateType state; 
    uint32_t timestamp; 
} DiscreteEvent;

typedef struct _StickInputs { 
    float pitch; 
    float roll; 
    float yaw; 
    float throttle; 
} StickInputs;


/* Helper constants for enums */
#define _DiscreteEvent_SignalType_MIN DiscreteEvent_SignalType_PitchTrimUp
#define _DiscreteEvent_SignalType_MAX DiscreteEvent_SignalType_Encoder1Center
#define _DiscreteEvent_SignalType_ARRAYSIZE ((DiscreteEvent_SignalType)(DiscreteEvent_SignalType_Encoder1Center+1))

#define _DiscreteEvent_StateType_MIN DiscreteEvent_StateType_Active
#define _DiscreteEvent_StateType_MAX DiscreteEvent_StateType_HiZ
#define _DiscreteEvent_StateType_ARRAYSIZE ((DiscreteEvent_StateType)(DiscreteEvent_StateType_HiZ+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define StickInputs_init_default                 {0, 0, 0, 0}
#define DiscreteEvent_init_default               {_DiscreteEvent_SignalType_MIN, _DiscreteEvent_StateType_MIN, 0}
#define StickInputs_init_zero                    {0, 0, 0, 0}
#define DiscreteEvent_init_zero                  {_DiscreteEvent_SignalType_MIN, _DiscreteEvent_StateType_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define DiscreteEvent_signal_tag                 1
#define DiscreteEvent_state_tag                  2
#define DiscreteEvent_timestamp_tag              3
#define StickInputs_pitch_tag                    1
#define StickInputs_roll_tag                     2
#define StickInputs_yaw_tag                      3
#define StickInputs_throttle_tag                 4

/* Struct field encoding specification for nanopb */
#define StickInputs_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    pitch,             1) \
X(a, STATIC,   REQUIRED, FLOAT,    roll,              2) \
X(a, STATIC,   REQUIRED, FLOAT,    yaw,               3) \
X(a, STATIC,   REQUIRED, FLOAT,    throttle,          4)
#define StickInputs_CALLBACK NULL
#define StickInputs_DEFAULT NULL

#define DiscreteEvent_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    signal,            1) \
X(a, STATIC,   REQUIRED, UENUM,    state,             2) \
X(a, STATIC,   REQUIRED, FIXED32,  timestamp,         3)
#define DiscreteEvent_CALLBACK NULL
#define DiscreteEvent_DEFAULT NULL

extern const pb_msgdesc_t StickInputs_msg;
extern const pb_msgdesc_t DiscreteEvent_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define StickInputs_fields &StickInputs_msg
#define DiscreteEvent_fields &DiscreteEvent_msg

/* Maximum encoded size of messages (where known) */
#define DiscreteEvent_size                       9
#define StickInputs_size                         20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
